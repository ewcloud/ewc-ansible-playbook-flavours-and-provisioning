---
- name: Prompt for user inputs
  hosts: localhost
  connection: local
  gather_facts: false

  vars_prompt:
    - name: ewc_provider
      prompt: choose your target EWC provider to be either 'ecmwf' or 'eumetsat'
      private: false

    - name: tf_project_path
      prompt: path to terraform working directory
      private: false

    - name: app_name
      prompt: application name, used as prefix in the full instance name
      private: false

    - name: instance_name
      prompt: name of the instance, used in the full instance name
      private: false

    - name: instance_index
      prompt: index or identifier for the instance, used as suffix in the full instance name
      private: false

    - name: flavor_name
      prompt: name the flavor to use for the instance
      private: false

    - name: image_name
      prompt: name the image to use for the instance
      private: false

    - name: public_keypair_name
      prompt: name of public keypair (stored in OpenStack) to be copied into the instance for remote SSH access
      private: false

    - name: private_keypair_path
      prompt: path to the local private keypair to use for SSH access to the instance. Or press Enter to accept default
      private: false
      default: "~/.ssh/id_rsa"

    - name: private_network_name
      prompt: private network name to attach the instance
      private: false

    - name: security_group_name
      prompt: security group name to apply to the instance
      private: false

    - name: ipa_domain
      prompt: domain name to be managed by the IPA server
      private: false

    - name: ipa_server_hostname
      prompt: hostname of the IPA server
      private: false

    - name: ipa_admin_username
      prompt: username of administrator account to replace the default IPA admin
      private: false

    - name: ipa_admin_password
      prompt: password of administrator account to replace the default IPA admin
      private: true
      unsafe: true

    - name: password_allowed_ip_ranges
      prompt: IP addresses or IP ranges (in CIDR format) to be allowed for password access in SSHD configuration. When in doubt, add only IP addresses you know and trust. Press Enter to accept default value [['10.0.0.0/8','172.16.0.0/12','192.168.0.0/16']]
      private: false

  vars:
    ecmwf_defaults:
      external_network_name_fact: "external-internet"

    eumetsat_defaults:
      external_network_name_fact: "external"

  tasks:
    - name: Validate user input
      ansible.builtin.assert:
        that:
          - ewc_provider is defined and ewc_provider != ''
          - ewc_provider | lower in ['ecmwf', 'eumetsat']
          - tf_project_path is defined and tf_project_path != ''
          - private_keypair_path is defined and private_keypair_path != ''
        fail_msg: "Input validation failed. See README.md for information on required inputs and their format."
        success_msg: "User input configuration is valid."

    - name: Store user input as localhost facts
      ansible.builtin.set_fact:
        tf_project_path_fact: "{{ tf_project_path }}"
        private_keypair_path_fact: "{{ private_keypair_path }}"

        defaults: >-
          {{
            ( ewc_provider == 'ecmwf' ) | ternary(ecmwf_defaults, eumetsat_defaults)
          }}

        ewc_tf_module_openstack_compute:
          app_name_fact: "{{ app_name }}"
          instance_name_fact: "{{ instance_name }}"
          instance_index_fact: "{{ instance_index }}"
          flavor_name_fact: "{{ flavor_name }}"
          image_name_fact: "{{ image_name }}"
          security_group_name_fact: "{{ security_group_name }}"
          public_keypair_name_fact: "{{ public_keypair_name }}"
          private_network_name_fact: "{{ private_network_name }}"
          instance_has_fip_fact: "{{ instance_has_fip }}"

        ewc_ansible_role_ipa_client_enroll:
          ipa_domain_fact: "{{ ipa_domain }}"
          ipa_server_hostname_fact: "{{ ipa_server_hostname }}"
          ipa_admin_username_fact: "{{ ipa_admin_username }}"
          ipa_admin_password_fact: "{{ ipa_admin_password }}"
          password_allowed_ip_ranges_fact: "{{ password_allowed_ip_ranges }}"

- name: Provision VM via Terraform and authorized OpenStack application credentials
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    - name: Create Terraform working directory
      ansible.builtin.file:
        path: "{{ hostvars['localhost']['tf_project_path_fact'] }}"
        state: directory
        mode: u=rwx,g=r,o=r

    - name: Customize Terraform module based on user inputs
      ansible.builtin.copy:
        dest: "{{ hostvars['localhost']['tf_project_path_fact'] }}/main.tf"
        mode: u=rwx,g=r,o=r
        content: |
          # Generated by Ansible
          module "web_server" {
            source = "github.com/ewcloud/ewc-tf-module-openstack-compute?ref=1.4.0"

            app_name       = "{{ hostvars['localhost']['ewc_tf_module_openstack_compute']['app_name_fact'] }}"
            instance_name  = "{{ hostvars['localhost']['ewc_tf_module_openstack_compute']['instance_name_fact'] }}"
            instance_index = "{{ hostvars['localhost']['ewc_tf_module_openstack_compute']['instance_index_fact'] }}"
            image_name     = "{{ hostvars['localhost']['ewc_tf_module_openstack_compute']['image_name_fact'] }}"
            flavor_name    = "{{ hostvars['localhost']['ewc_tf_module_openstack_compute']['flavor_name_fact'] }}"
            keypair_name   = "{{ hostvars['localhost']['ewc_tf_module_openstack_compute']['public_keypair_name_fact'] }}"

            networks        = ["{{ hostvars['localhost']['ewc_tf_module_openstack_compute']['private_network_name_fact'] }}"]
            security_groups = ["{{ hostvars['localhost']['ewc_tf_module_openstack_compute']['security_group_name_fact'] }}"]

            external_network_name = "{{ hostvars['localhost']['defaults']['external_network_name_fact'] }}"

            # NOTE: A floating IP is used in post-provisioning, for instance configuration
            # by Ansible via ssh from localhost. It'll be removed after successful start if not requested by the user!
            instance_has_fip = true

            tags = {
              provisioning-tool = "terraform"
            }
          }

    - name: Gather Terraform execution facts
      ansible.builtin.copy:
        dest: "{{ hostvars['localhost']['tf_project_path_fact'] }}/outputs.tf"
        mode: u=rwx,g=r,o=r
        content: |
          # Generated by Ansible
          output "instance" {
            value = "${module.web_server.instance}"
          }

    - name: Check if Terraform state file exists
      ansible.builtin.stat:
        path: "{{ hostvars['localhost']['tf_project_path_fact'] }}/terraform.tfstate"
      register: tfstate_file

    - name: Perform initial instance provisioning
      community.general.terraform:
        project_path: "{{ hostvars['localhost']['tf_project_path_fact'] }}"
        state: present
        force_init: true
        overwrite_init: false
        provider_upgrade: false
      register: tf_initialized_and_applied
      environment:
        TF_IN_AUTOMATION: "true"
      when: not tfstate_file.stat.exists

    - name: Update previously provisioned instance
      community.general.terraform:
        project_path: "{{ hostvars['localhost']['tf_project_path_fact'] }}"
        state: present
        force_init: false
        overwrite_init: false
        provider_upgrade: false
      register: tf_applied
      environment:
        TF_IN_AUTOMATION: "true"
      when: tfstate_file.stat.exists

    - name: Store private IP address of the newly provisioned OpenStack VM
      ansible.builtin.set_fact:
        remote_host_internal_ip_fact: "{{ tf_applied.outputs.instance.value.internal_ip if tfstate_file.stat.exists else tf_initialized_and_applied.outputs.instance.value.internal_ip }}"

    - name: Store public IP address of the newly provisioned OpenStack VM
      ansible.builtin.set_fact:
        remote_host_public_ip_fact: "{{ tf_applied.outputs.instance.value.floating_ip if tfstate_file.stat.exists else tf_initialized_and_applied.outputs.instance.value.floating_ip }}"

    - name: Store hostname of the newly provisioned OpenStack VM
      ansible.builtin.set_fact:
        ipa_client_hostname_fact: "{{ tf_applied.outputs.instance.value.name if tfstate_file.stat.exists else tf_initialized_and_applied.outputs.instance.value.name }}"

    - name: Wait for SSH to become available
      ansible.builtin.wait_for:
        host: "{{ remote_host_public_ip_fact }}"
        port: 22
        timeout: 300

    - name: Add dynamic host to inventory
      ansible.builtin.add_host:
        name: "remote_host"
        ansible_host: "{{ remote_host_public_ip_fact }}"
        ansible_user: "cloud-user"
        ansible_ssh_private_key_file: "{{ hostvars['localhost']['private_keypair_path'] }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=accept-new"

- name: Install IPA client and enroll into an IPA server's LDAP/DNS services
  hosts: remote_host
  become: true
  become_user: root
  become_method: ansible.builtin.sudo

  tasks:
    - name: EWC Ansible Role IPA Client Enroll
      ansible.builtin.include_role:
        name: ewc-ansible-role-ipa-client-enroll-1.0
      vars:
        ipa_client_hostname: "{{ hostvars['localhost']['ipa_client_hostname_fact'] }}"
        ipa_domain: "{{ hostvars['localhost']['ewc_ansible_role_ipa_client_enroll']['ipa_domain_fact'] }}"
        ipa_server_hostname: "{{ hostvars['localhost']['ewc_ansible_role_ipa_client_enroll']['ipa_server_hostname_fact'] }}"
        ipa_admin_username: "{{ hostvars['localhost']['ewc_ansible_role_ipa_client_enroll']['ipa_admin_username_fact'] }}"
        ipa_admin_password: "{{ hostvars['localhost']['ewc_ansible_role_ipa_client_enroll']['ipa_admin_password_fact'] }}"
        password_allowed_ip_ranges: "{{ hostvars['localhost']['ewc_ansible_role_ipa_client_enroll']['password_allowed_ip_ranges_fact'] }}"

- name: Cleanup and summarize execution after post-provisioning
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    - name: Update intance's Terraform definition file
      ansible.builtin.lineinfile:
        path: "{{ hostvars['localhost']['tf_project_path_fact'] }}/main.tf"
        search_string: 'instance_has_fip'
        line: instance_has_fip = false
        mode: u=rwx,g=r,o=r
      when: hostvars['localhost']['ewc_tf_module_openstack_compute']['instance_has_fip_fact'] != 'yes'

    - name: Remove any unsolicited external IP addresses used during post-provisioning
      community.general.terraform:
        project_path: "{{ hostvars['localhost']['tf_project_path_fact'] }}"
        state_file: "{{ hostvars['localhost']['tf_project_path_fact'] }}/terraform.tfstate"
        state: present
        force_init: false
        overwrite_init: false
        provider_upgrade: false
      register: tf_applied
      environment:
        TF_IN_AUTOMATION: "true"
      when: hostvars['localhost']['ewc_tf_module_openstack_compute']['instance_has_fip_fact'] != 'yes'

    - name: List created/edited OpenStack resources
      ansible.builtin.debug:
        msg:
          - "Terraform state file path: {{ hostvars['localhost']['tf_project_path_fact'] }}/terraform.tfstate"
          - "OpenStack instance name: {{ hostvars['localhost']['ipa_client_hostname_fact'] }}"
          - "OpenStack internal IP address: {{ hostvars['localhost']['remote_host_internal_ip_fact'] }}"
          - "OpenStack public IP address: {{ 'N/A' if hostvars['localhost']['ewc_tf_module_openstack_compute']['instance_has_fip_fact'] != 'yes' else hostvars['localhost']['remote_host_public_ip_fact'] }}"
